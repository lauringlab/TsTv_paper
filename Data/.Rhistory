# horizontal
# fig4.fish.det = fig4.fish.fnx(muts = "Mut123",set = "Detrimentals")#charge = black, polarity = red, polarity & volume = blue
# # fig4.fish.bf = fig4.fish.fnx(muts = "Mut123",set = "Beneficials")
#
# fig4.cdf.det = fig4.cdf.fnx(muts = "Mut123",set = "Detrimentals")#charge = black, polarity = red, polarity & volume = blue
# # fig4.cdf.bf = fig4.cdf.fnx(muts = "Mut123",set = "Beneficials")+xlim(1,8)
#
# fig4 = plot_grid(fig4.cdf.det,fig4.fish.det,nrow = 2, ncol = 1,align = "v")
# #Option 2-one class individually, charge as example
# fig4.fish.det.2 = fig4.fish.fnx(muts = "Mut123",set = "Detrimentals",class = "Charge")
# # fig4.fish.bf.2 = fig4.fish.fnx(muts = "Mut123",set = "Beneficials",class = "Charge")
#
# fig4.cdf.det2 = fig4.cdf.fnx(muts = "Mut123",set = "Detrimentals",class = "Charge")
# # fig4.cdf.bf.2 = fig4.cdf.fnx(muts = "Mut123",set = "Beneficials",class = "Charge")
#
# fig4.2 = plot_grid(fig4.fish.det.2,fig4.cdf.det2,labels = c("A","B"),nrow = 2, ncol = 1,align = "v")
# other mutations options doesn't change much.
# fig4.fish.fnx(muts = "TS.TV.Only",set = "Detrimentals",title = "TS.TV.Only")
# fig4.fish.fnx(muts = "TS.TV.Only",set = "Beneficials",title = "TS.TV.Only")
#
# fig4.fish.fnx(muts = "MUT1",set = "Detrimentals",title = "MUT1")
# fig4.fish.fnx(muts = "MUT1",set = "Beneficials",title = "MUT1")
#
# fig4.fish.fnx(muts = "Mut23",set = "Detrimentals",title = "MUT23")
# fig4.fish.fnx(muts = "Mut23",set = "Beneficials",title = "MUT23")
#end----
# Chunk 29: FIG5
#data----
table3.dat = tstv.rc
row.names(table3.dat) = NULL
table3.dat %<>% rename(c(pvalue = "p.value")) %>% mutate(Study = map.xstop(Gene),Class = mapvalues(Class,c("charge","polarity","pv"),c("Charge","Polarity","Polarity & Volume")))
#pl fnxs----
# ##horizontal faceting by class
# fig5.fa.fnx = function(dat = fig5.dat,
#                        sig.level = .05,
#                        study = NULL,
#                        class = NULL,
#                        title = NULL,
#                        Facet = "Class",
#                        Scales = "fixed", #can be "free","free_x","free_y"
#                        bonf = F,
#                        nhypo = 1
# ){
#
#   dat %<>% sub.pl(study = study,class = class)
#   dat %<>% sig.pl(sig.level,bonf,nhypo)
#
#   #plot
#   pl = ggplot(data = dat,aes(y = OR,x = Study))+
#     geom_point(stat = "identity",
#                size = 4,
#                shape = 21,
#                fill = "white")+ #outlines of all points
#     geom_point(stat = "identity",
#                size = 4,
#                mapping = aes(alpha = sig))+
#     scale_alpha_manual(values = c(1,0))+ #solid fill for all sig points
#     geom_errorbar(aes(x = Study, ymax = OR_CI95_upper,ymin = OR_CI95_lower),width = .5)+
#     geom_hline(aes(yintercept = 1))+
#     ggtitle(title)
#
#   pl %<>% faceting(Facet,Scales)
#
#   pl+expand_limits(y=0)+guides(alpha = F)
# }
#
# ##no faceting-one graph, with class being color, looks bad with error bars. Could change to shape being class if don't want to use another color figure price.
# fig5.fnx = function(dat = fig5.dat,
#                     sig.level = .05,
#                     study = NULL,
#                     class = NULL,
#                     title = NULL,
#                     Facet = "Class",
#                     Scales = "fixed", #can be "free","free_x","free_y"
#                     bonf = F,
#                     nhypo = 1
# ){
#
#   dat %<>% sub.pl(study = study,class = class)
#   dat %<>% sig.pl(sig.level,bonf,nhypo)
#
#   #plot
#   pl = ggplot(data = dat,aes(y = OR,x = Study,color = Class))+
#     geom_point(stat = "identity",
#                size = 4,
#                shape = 21,
#                fill = "white"
#                )+ #outlines of all points
#     geom_point(stat = "identity",
#                size = 4,
#                mapping = aes(alpha = sig))+
#     scale_alpha_manual(values = c(1,0))+ #solid fill for all sig points
#     # geom_errorbar(aes(x = Study, ymax = OR_CI95_upper,ymin = OR_CI95_lower),width = .5)+
#     geom_hline(aes(yintercept = 1))+
#     ggtitle(title)+
#     scale_color_manual(values = c("black","red","blue","green"))+
#     ylab("Odds Ratio")+
#     xlab(NULL)
#   pl+expand_limits(y=0)+theme(legend.position = "none")
# }
#
# fig5 = fig5.fnx(study = bl.levels) #now a table.
#table----
table3 = table3.dat %>% subset(Study %in% bl.levels,select = c(Gene,Class,OR,p.value)) %>% arrange(Class) %>% mutate(sig = ifelse(p.value<.05,"*","")) %>% subset(select = c(Gene,Class,OR,sig)) %>% mutate(OR = round(OR,2) %>% paste0(sig)) %>% subset(select = c(Gene,Class,OR))
# Chunk 30: FIG56
#data----
##fish----
fig5.r.fish = rbind(
rbind(r.fish$charge$data$fisher.bloom.det %>% mutate(Set = "Detrimentals",Class = "Charge"),
r.fish$polarity$data$fisher.bloom.det %>% mutate(Set = "Detrimentals",Class = "Polarity"),
r.fish$pv$data$fisher.bloom.det %>% mutate(Set = "Detrimentals",Class = "Polarity & Volume")
),
rbind(r.fish$charge$data$fisher.bloom.bf %>% mutate(Set = "Beneficials",Class = "Charge"),
r.fish$polarity$data$fisher.bloom.bf %>% mutate(Set = "Beneficials",Class = "Polarity"),
r.fish$pv$data$fisher.bloom.bf %>% mutate(Set = "Beneficials",Class = "Polarity & Volume")
)
) %>% mutate(Study = map.xstop(Study))
fig6.c.fish = rbind(rbind(c.fish$charge$data$fisher.bloom.det %>% mutate(Set = "Detrimentals",Class = "Charge"),
c.fish$polarity$data$fisher.bloom.det %>% mutate(Set = "Detrimentals",Class = "Polarity"),
c.fish$pv$data$fisher.bloom.det %>% mutate(Set = "Detrimentals",Class = "Polarity & Volume")
),
rbind(c.fish$charge$data$fisher.bloom.bf %>% mutate(Set = "Beneficials",Class = "Charge"),
c.fish$polarity$data$fisher.bloom.bf %>% mutate(Set = "Beneficials",Class = "Polarity"),
c.fish$pv$data$fisher.bloom.bf %>% mutate(Set = "Beneficials",Class = "Polarity & Volume")
)
) %>% mutate(Study = map.xstop(Study))
fig5.r.fish$Study = factor(fig5.r.fish$Study, levels = bl.levels)
fig6.c.fish$Study = factor(fig6.c.fish$Study, levels = bl.levels)
##cdf----
fig5.r.cdf = rbind(
rbind(r.cdf$charge$data$det %>% mutate(Set = "Detrimentals",Class = "Charge"),
r.cdf$polarity$data$det %>% mutate(Set = "Detrimentals",Class = "Polarity"),
r.cdf$pv$data$det %>% mutate(Set = "Detrimentals",Class = "Polarity & Volume")
),
rbind(r.cdf$charge$data$bf %>% mutate(Set = "Beneficials",Class = "Charge"),
r.cdf$polarity$data$bf %>% mutate(Set = "Beneficials",Class = "Polarity"),
r.cdf$pv$data$bf %>% mutate(Set = "Beneficials",Class = "Polarity & Volume")
)
) %>% mutate(Study = map.xstop(Study))
fig6.c.cdf = rbind(
rbind(c.cdf$charge$data$det %>% mutate(Set = "Detrimentals",Class = "Charge"),
c.cdf$polarity$data$det %>% mutate(Set = "Detrimentals",Class = "Polarity"),
c.cdf$pv$data$det %>% mutate(Set = "Detrimentals",Class = "Polarity & Volume")
),
rbind(c.cdf$charge$data$bf %>% mutate(Set = "Beneficials",Class = "Charge"),
c.cdf$polarity$data$bf %>% mutate(Set = "Beneficials",Class = "Polarity"),
c.cdf$pv$data$bf %>% mutate(Set = "Beneficials",Class = "Polarity & Volume")
)
) %>% mutate(Study = map.xstop(Study))
#pl fnx----
fig5.cdf.fnx = function(
dat,
study = NULL,
bl.other = "bl",
muts = NULL,
set = NULL,
class = NULL,
title = class,
Color = "Class",
Facet = "Study",
Scales = "fixed", #can be "free","free_x","free_y"
text.off = T,
y.off = F,
x.off = F,
facet.label.off = T,
font.size = global.font.size
){
dat %<>% sub.pl(study,muts,set,class)
lims = xlims.cdf(set)
dat %<>% subset(Fitness.Mean>=lims$xmin & Fitness.Mean<=lims$xmax)
xlabel = xlabel.pl(bl.other,fish.cdf = "cdf")
#plot
pl = ggplot(data = dat, aes(x = Fitness.Mean))+
stat_ecdf(
aes(linetype=TS_TV,
color = if(Color == "Class"){Class}else if(Color == "Mutations"){Mutations} else if(Color == "Set"){Set} else{Study}
)
)+
scale_color_manual(values = c("black","red","blue","green"),name = Color)+ #takes into account when there are 4 values, green is 4th, only when color = Mutations will have 4 colors.
scale_linetype_manual(values = c("TS" = "solid","TV" = "dotted"))+
ylab("Percentile")+
xlab(xlabel)+
ggtitle(title)
pl %<>% faceting(Facet,Scales)
pl = pl+
theme_cowplot(font_size = font.size)+
theme(legend.position = "none",
axis.text = element_text(size = rel(.65))
)
pl %<>% x.ticks()
pl %<>% text.fnx(text.off)
pl %<>% axes(y.off,x.off)
pl %<>% facet.label(facet.label.off)
#return
pl
}
#Option 1-all classes together----
#fig6
fig5.r.cdf.int = fig5.cdf.fnx(dat = fig5.r.cdf,set = "Detrimentals",study = bl.levels[1:2],title = NULL,text.off = F,facet.label.off = F)
fig5.r.fish.int = fig4.fish.fnx(dat = fig5.r.fish,set = "Detrimentals",study = bl.levels[1:2],title = NULL,text.off = F,use.ylims = F)
fig5.r.cdf.surf = fig5.cdf.fnx(dat = fig5.r.cdf,set = "Detrimentals",study = bl.levels[3:4],title = NULL,text.off = F,facet.label.off = F)
fig5.r.fish.surf = fig4.fish.fnx(dat = fig5.r.fish,set = "Detrimentals",study = bl.levels[3:4],title = NULL,text.off = F,use.ylims = F)
fig5.r = plot_grid(fig5.r.cdf.int,fig5.r.fish.int,fig5.r.cdf.surf,fig5.r.fish.surf,rel_heights = c(.6,.4,.6,.4),nrow = 4,align = "v",labels = c("A","","B"), label_size = pl.lab.font.size)
#fig7
fig6.c.cdf.int = fig5.cdf.fnx(dat = fig6.c.cdf,set = "Detrimentals",study = bl.levels[1:2],title = NULL,text.off = F,facet.label.off = F)
fig6.c.fish.int = fig4.fish.fnx(dat = fig6.c.fish,set = "Detrimentals",study = bl.levels[1:2],title = NULL,text.off = F,use.ylims = F)
fig6.c.cdf.surf = fig5.cdf.fnx(dat = fig6.c.cdf,set = "Detrimentals",study = bl.levels[3:4],title = NULL,text.off = F,facet.label.off = F)
fig6.c.fish.surf = fig4.fish.fnx(dat = fig6.c.fish,set = "Detrimentals",study = bl.levels[3:4],title = NULL,text.off = F,use.ylims = F)
fig6.c = plot_grid(fig6.c.cdf.int,fig6.c.fish.int,fig6.c.cdf.surf,fig6.c.fish.surf,rel_heights = c(.6,.4,.6,.4),nrow = 4,align = "v",labels = c("A","","B"), label_size = pl.lab.font.size)
#pres
pres.fig5.fish.np = fig4.fish.fnx(dat = fig5.r.fish,set = "Detrimentals",class  = "Charge",study = "NP (H1N1)",title = NULL,use.ylims = F,text.off = F,facet.label.off = F,bonf = F,point.size = 3.5)+ylim(0,3)
pres.fig3.fish.np = fig2.fish.fnx(dat = fig3.fish.dat,bl.other = "bl",study = "NP (H1N1)",title = NULL,use.ylims = F,text.off = F,point.size = 3.5,facet.label.off = F,bonf = F)+ylim(0,3)
pres.fig3.fish.env = fig2.fish.fnx(dat = fig3.fish.dat,bl.other = "bl",study = "HIV ENV",title = NULL,use.ylims = F,text.off = F,point.size = 3.5,facet.label.off = F,bonf = F)+ylim(0,6)
pres.fig5.fish.env = fig4.fish.fnx(dat = fig5.r.fish,set = "Detrimentals",class  = "Polarity",study = "HIV ENV",title = NULL,use.ylims = F,text.off = F,facet.label.off = F,bonf = F,point.size = 3.5)+ylim(0,6)
#prev. option 1----
# fig6.r.fish.det = fig4.fish.fnx(dat = fig6.r.fish,set = "Detrimentals")
# #charge = black, polarity = red, polarity & volume = blue
# # fig6.r.fish.bf = fig4.fish.fnx(dat = fig6.r.fish,set = "Beneficials")
# fig6.r.cdf.det = fig6.cdf.fnx(dat = fig6.r.cdf,set = "Detrimentals")#charge = black, polarity = red, polarity & volume = blue
# # fig4.r.cdf.bf = fig6.cdf.fnx(dat = fig6.r.cdf,set = "Beneficials")+xlim(1,10) #same limit as last threshold in fish
#
# fig6.c.fish.det = fig4.fish.fnx(dat = fig6.c.fish,set = "Detrimentals")#charge = black, polarity = red, polarity & volume = blue
# # fig6.c.fish.bf = fig4.fish.fnx(dat = fig6.c.fish,set = "Beneficials")
# fig6.c.cdf.det = fig6.cdf.fnx(dat = fig6.c.cdf,set = "Detrimentals")#charge = black, polarity = red, polarity & volume = blue
# # fig4.c.cdf.bf = fig6.cdf.fnx(dat = fig6.c.cdf,set = "Beneficials")+xlim(1,10) #same limit as last threshold in fish
#
# fig6.r = plot_grid(fig6.r.fish.det,fig6.r.cdf.det,labels = c("A","B"),nrow = 2, ncol = 1,align = "v")
# fig6.c = plot_grid(fig6.c.fish.det,fig6.c.cdf.det,labels = c("A","B"),nrow = 2, ncol = 1,align = "v")
#Option 2-one class individually, Polarity & Volume as example----
# fig6.r.fish.det.2 = fig4.fish.fnx(dat = fig6.r.fish,set = "Detrimentals",class = "Polarity & Volume")
# fig6.r.cdf.det.2 = fig6.cdf.fnx(dat = fig6.r.cdf,set = "Detrimentals",class = "Polarity & Volume")
#
# fig4.fish.fnx(dat = fig6.c.fish,set = "Detrimentals",class = "Charge", study = "NP.H1N1")
#
#
# fig6.c.fish.det.2 = fig4.fish.fnx(dat = fig6.c.fish,set = "Detrimentals",class = "Polarity & Volume")
# fig6.c.cdf.det.2 = fig6.cdf.fnx(dat = fig6.c.cdf,set = "Detrimentals",class = "Polarity & Volume")
#
# fig6.r.2 = plot_grid(fig6.r.fish.det.2,fig6.r.cdf.det.2,labels = c("A","B"),nrow = 2, ncol = 1,align = "v")
# fig6.c.2 = plot_grid(fig6.c.fish.det.2,fig6.c.cdf.det.2,labels = c("A","B"),nrow = 2, ncol = 1,align = "v")
#end----
# Chunk 31: SAVE
#fig 1
ggsave("fig1.pdf",fig1,width = 16.9,height = 24, units = "cm")
#table I
write.csv(table1, file = "TABLE.I.csv", row.names = F)
#fig 2
ggsave("fig2.pdf",fig2,width = 16.9,height = 24,units = "cm")
#table 2
table2 %>% write.csv(file = "TABLE.II.csv",row.names = F)
#fig 3
ggsave("fig3.pdf",fig3,width = 16.9,height = 24,units = "cm")
#fig 4
# ggsave("fig4.m123.pdf",fig4.m123,width = 16.9,height = 24,units = "cm")
# ggsave("fig4.m1.pdf",fig4.m1,width = 16.9,height = 24,units = "cm")
ggsave("fig4.pdf",fig4.tstv,width = 16.9,height = 24,units = "cm")
#fig 5
write.csv(table3, file = "TABLE.III.csv", row.names = F)
#fig 6 & 7
ggsave("fig5.pdf",fig5.r,width = 16.9,height = 24, units = "cm")
ggsave("fig6.pdf",fig6.c,width = 16.9,height = 24, units = "cm")
# Chunk 32: SUPP.TABLE.I
supp.table1 = each %>%
subset(set == "detrimental & viable_xSTOP",select = -c(alternative,statistic.W,N_TS,N_TV,set)) %>%
mutate(Study = map.xstop(Study),p.value = round(p.value %>% as.vector %>% as.numeric,3),auc = round(auc %>% as.vector %>% as.numeric,3)) %>% subset(!(Study %in% c(to.names.bl,"Bloom_Flu","Lauring_gw"))) %>% rename(c(Study = "Dataset",auc = "AUC",p.value = "p-value")) %>% subset(select = c("Dataset","AUC","p-value")) %>% arrange(Dataset)
row.names(supp.table1) = NULL
supp.table1 = merge(table1 %>% subset(set == "Viable"),supp.table1) %>% arrange(-Total) %>% subset(select = c("Dataset","Total","AUC","p-value")) %>% rename(c("p-value" = "P value", Total = "N"))   #adds N for viable, arranges in decreasing order of N.
# Chunk 33: SUPP.FIG.1
supp.fig1.dat = all_studies %>% subset(!grepl("Bloom",Study) & !is.na(Fitness.SD) & S_NS == "NS" & (is.na(Dataset)|Dataset != "Described") & Fitness.Mean<=1 & !grepl("stop|STOP",AA_Sub) & !(grepl("Stop",AA_Sub) & Study == "VSV"), select = c(S_NS, Fitness.CV,Study,Dataset)) %>%
mutate(Study = map.xstop(Study)) %>%
mutate(Study = factor(Study,levels = other.levels))
supp.fig1 = ggplot(data = supp.fig1.dat)+
geom_boxplot(aes(x = Study,y = Fitness.CV %>% as.vector %>% as.numeric))+
ylab("Coefficient of Variance for Each Mutation")
# Chunk 34: SUPP.FIG.2
#data----
supp.fig2.dat = dec_thresholds %>% subset(gr.xstop(Study) & !grepl("Lauring_gw|Bloom_Flu|Bloom_H1N1",Study)) %>% mutate(Study = map.xstop(Study)) %>% mutate(Study = factor(Study,levels = c(other.levels,bl.levels)))
supp.fig2.dat$p.value = supp.fig2.dat$p.value %>% as.vector %>% as.numeric
#pl----
supp.fig2 = fig1.fnx(dat = supp.fig2.dat,study = c("Total","Internal","Surface","HIV Combined","HIV IN","HIV CA"),title = NULL,text.off = F,point.size = 2)+facet_wrap(~Study,nrow = 2,ncol = 3)
# Chunk 35: SUPP.TABLE.2
supp.table2.dat = aa %>% mutate(charge = mapvalues(charge,c("neut","pos","neg"),c("neutral","positive","negative")),
pol_vol = gsub("neut","neutral",pol_vol) %>% gsub("_"," & ",.)) %>% arrange(pol_vol,charge,polarity) %>% subset(select = c(AA,code1,pol_vol,charge,polarity)) %>% rename(c(AA = "Amino Acids",pol_vol = "Polarity.Size",charge = "Charge", polarity = "Polarity"))
#OPTION 2
supp.table2 = rbind(c(Classification = "CHARGE",""),
ddply(supp.table2.dat,"Charge",summarise,"Amino Acids" = paste(code1,collapse = ",")) %>% rename(c("Charge" = "Classification")),
c(Classification = "POLARITY",""),
ddply(supp.table2.dat,"Polarity",summarise,"Amino Acids" = paste(code1,collapse = ",")) %>% rename(c("Polarity" = "Classification")),
c(Classification = "POLARITY & SIZE",""),
ddply(supp.table2.dat,"Polarity.Size",summarise,"Amino Acids" = paste(code1,collapse = ",")) %>% rename(c("Polarity.Size" = "Classification")))
# Chunk 36: SAVE
write.csv(supp.table1, file = "SUPP.TABLE.I.csv", row.names = F)
ggsave("supp.fig1.pdf",supp.fig1,width = 16.9,height = 24,units = "cm")
ggsave("supp.fig2.pdf",supp.fig2,width = 16.9,height = 24,units = "cm")
write.csv(supp.table2, file = "SUPP.TABLE.II.csv", row.names = F)
rm(list = ls())
knitr::opts_chunk$set(echo = T, warnings = FALSE, message = F)
library(knitr)
library(plyr)
library(reshape2)
library(magrittr)
library(ggplot2)
library(ggrepel)
library(cowplot)
library(Biostrings)
# library(Hmisc) #masks translate in biostring...needed for rcorr function later when doing spearman for bloom and lauring.
data_path = ("../Data")
analysis.path = ("../Analysis")
setwd(data_path)
#other studies----
##fitness data
np = read.csv("NP_bloom_MBE_2014_Supplementary_file_1 (1).csv", stringsAsFactors = F)
np2 = read.table("NP_bloom_pr8(Supp_file_1_Text_mean_pr1934_prefs).txt", stringsAsFactors = F, header = T)
ha = read.table("Supplemental_File_2_HApreferences.txt",stringsAsFactors = F, header = T)
ha_rescaled = read.table("Supplemental_File_3_HApreferences_rescaled.txt",stringsAsFactors = F, header = T)
env = read.table("S1_File_Bloom_env.txt",stringsAsFactors = F,header = T)
#C check if env published recently is same as env used from biorxiv, replaced 170416. They are.
# env.old = read.table("S1_File_Bloom_env.biorvix.txt",stringsAsFactors = F,header = T)
# identical(env,env.old)
hiv_in = read.csv("HIV_IN.csv", stringsAsFactors = F)
hiv_ca = read.csv("HIV_CA.csv", stringsAsFactors = F)
phix174 = read.table("phiX174_Domingo_Calap_09.txt", sep = " ", stringsAsFactors = F, fill = TRUE, row.names = NULL)
qb = read.table("qb_Domingo_Calap_09.txt", sep = " ", stringsAsFactors = F, fill = TRUE, row.names = NULL)
vsv = read.delim("vsv_Sanjuan_04.txt", stringsAsFactors = F)
vsv_full = read.csv("VSV_single_mutants_IDs.csv", stringsAsFactors = F)
tev = read.delim("TEV_Carrasco_07.txt", stringsAsFactors = F, comment.char = "#")
tev_full = read.delim("TEV_Carrasco_07_full.txt", stringsAsFactors = F, comment.char = "#")
f1_1 = read.delim("f1_pg1_Peris_10.txt", stringsAsFactors = F, comment.char = "#")
f1_2 = read.delim("f1_pg2_Peris_10.txt", stringsAsFactors = F, comment.char = "#", header=F)
f1_3 = read.delim("f1_pg3_Peris_10.txt", stringsAsFactors = F, comment.char = "#", header=F)
##bloom sequences & check-----
np_cds = readDNAStringSet("bloom_plasmids_gong_elife-00631-supp1-v1-download.txt") %>% .$`reverse complement of vRNA for A/Aichi/2/1968 (H3N2) NP as taken from pHWAichi68-NP` %>% subseq(.,46,1542)
np2_cds = readDNAStringSet("np_pr8.txt") %>% .$`EF467822.1 Influenza A virus (A/Puerto Rico/8/34(H1N1)) segment 5, complete sequence` %>% subseq(.,46,1542)
ha_cds = readDNAStringSet("bloom_plasmids_gong_elife-00631-supp1-v1-download.txt") %>% .$`reverse complement of vRNA for A/WSN/1933 (H1N1) HA as taken from pHW184-HA` %>% subseq(33,1730)
env_cds = readDNAStringSet("bloom_gp120gp41_plasmid.txt") %>% .$gp120_gp41
ha_prot = translate(ha_cds) #C check if position is correct by translating first several aas to see if its start of protein, it's correct.
np_prot = translate(np_cds) #C checked first and last several aas, its's correct.
np2_prot = translate(np2_cds)
env_prot = translate(env_cds) %>% subseq(31,707) #bloom position/site numbering is slightly different than just straight 1:length(protein), but site 142 has 142,142a-e. So number of last site is 5 less than actual length of protein, plus they didn't mutate full length of protein, instead, 677 sites.
#C check if need to take out stop codons:done. yes in some.
#C check if np is truly starting with met in mutations as well: it does.
##annot bloom WT codon----
np %<>% mutate(WT_codon = codons(np_cds %>% subseq(.,1,length(np_cds)-3)) %>% as.character %>% tolower(),
WT_site_pref = apply(np, 1,function(row){
row[paste0("PI_",row["WT_AA"])]
})) #get wt codons from cds, not stop codon
np2 %<>% rename(c(WT = "WT_AA", POSITION  = "X.SITE"))
np2 %<>% mutate(WT_codon = codons(np2_cds %>% subseq(.,1,length(np2_cds)-3)) %>% as.character %>% tolower(),
WT_site_pref = apply(np2, 1,function(row){
row[paste0("PI_",row["WT_AA"])]
})) #get wt codons from cds, not stop codon
ha %<>% rename(c(WT = "WT_AA", POSITION  = "X.SITE"))
ha %<>% mutate(WT_codon = codons(ha_cds %>% subseq(.,4,length(ha_cds)-3)) %>% as.character %>% tolower(),
WT_site_pref = apply(ha, 1,function(row){
row[paste0("PI_",row["WT_AA"])]
})) #get wt codons from cds, not start or stop codons.
AA2nuc_pos = function(aa_site){
c(start = 3*aa_site-2, end = 3*aa_site)
} #to useful fnxs: get the start and end nucleotide positions for an aa position, if both are starting from 0
env %<>% subset(select = -c(PI_.)) %>%rename(c(WT = "WT_AA", POSITION  = "X.SITE")) #exclude the stop mutations.
env %<>% mutate(WT_codon = codons(env_cds %>% subseq(.,AA2nuc_pos(31)["start"],AA2nuc_pos(707)["end"])) %>% as.character %>% tolower(),
WT_site_pref = apply(env, 1,function(row){
row[paste0("PI_",row["WT_AA"])]
})) #get wt codons from cds, not start or stop codons.
#C 17_01_17: count(env,.(WT_AA,WT_codon)) #all AAs are annotated with correct codons, checking against an independent codon table
#lauring data----
##fitness
lethal_muts = read.csv("Table_1rev2.csv", stringsAsFactors = F) #lauring
viable_muts = read.csv("Table_3rev2.csv", stringsAsFactors = F) #lauring
#end----
aa = read.csv("AA_list.csv", stringsAsFactors = F)
colnames(aa) = c("AA","code3","code1")
aa %<>% subset(AA != "asparagine or aspartic acid" & AA != "glutamine or glutamic acid")
#C 17_01_17: all aas have correct code1 and code3
#charge----
pos = c("R","H","K")
neg = c("D","E")
neut =  c('A', 'N', 'C', 'Q', 'G', 'I', 'L', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V')
#polarity----
polar = c('R', 'N',"D", 'C', 'Q', "E", 'G',"H","K",'S', 'T', 'Y')
nonpolar = c("A","I","L","M","F","P","W","V")
#polarity & volume----
special = "C"
neut_small = c("A","G","P","S","T")
polar_small = c("N","D","Q","E")
polar_large = c("R","H","K")
nonpolar_small = c("I","L","M","V")
nonpolar_large = c("F","W","Y")
#class lists----
aa %<>% mutate(charge = ifelse(code1 %in% pos, "pos", ifelse(code1 %in% neg,"neg",ifelse(code1 %in% neut,"neut",NA))),
polarity = ifelse(code1 %in% polar, "polar", ifelse(code1 %in% nonpolar,"nonpolar",NA)),
pol_vol = ifelse(code1 %in% special, "special", ifelse(code1 %in% neut_small,"neut_small",ifelse(code1 %in% polar_small,"polar_small",ifelse(code1 %in% polar_large,"polar_large",ifelse(code1 %in% nonpolar_small, "nonpolar_small",ifelse(code1 %in% nonpolar_large, "nonpolar_large",NA))))))) #C 17_01_18
firstup <- function(x) {
substr(x, 1, 1) <- toupper(substr(x, 1, 1))
x
}
aa$code3 = firstup(aa$code3)
charge = list(pos = c("R","H","K"), neg = c("D","E"), neut =  c('A', 'N', 'C', 'Q', 'G', 'I', 'L', 'M', 'F', 'P', 'S', 'T', 'W', 'Y', 'V'))
polarity = list(polar = c('R', 'N',"D", 'C', 'Q', "E", 'G',"H","K",'S', 'T', 'Y'), nonpolar = c("A","I","L","M","F","P","W","V"))
pv = list(special = "C", neut_small = c("A","G","P","S","T"), polar_small = c("N","D","Q","E"), polar_large = c("R","H","K"), nonpolar_small = c("I","L","M","V"), nonpolar_large = c("F","W","Y"))
#end----
#mk codon_table----
library(seqinr)
codon_freqs2 = uco("dummy",as.data.frame = T) %>% arrange(AA)
detach("package:seqinr", unload = T)
library(Biostrings) #always detach seqinr and reload biostrings after using seqinr because it masks some things in biostrings, and biostrings is more generally useful
codon_table = codon_freqs2 %>% subset(AA!= "Stp",select = c(AA,codon)) #just get a codon table easily
codon_table = rename(codon_table,"AA" = "code3")
id_t2aa = sapply(codon_table$code3,grep,aa$code3)
codon_table %<>% mutate(AA = aa$AA[id_t2aa],code1 = aa$code1[id_t2aa],charge = aa$charge[id_t2aa],polarity = aa$polarity[id_t2aa],pv = aa$pol_vol[id_t2aa]) #C 17_01_18: all correct notations as compared to aa df
#add in stop codons to codon table
stops = c('taa','tag','tga')
stops = lapply(stops,function(s){
c("STOP",s,rep("STOP",ncol(codon_table)-2))
}) %>% do.call(rbind,.)
colnames(stops) = colnames(codon_table)
codon_table %<>% rbind(.,stops)
#string fnxs----
str_rev = function(str_vector){
strsplit(str_vector, "") %>% lapply(.,rev) %>% sapply(.,paste, collapse = "")
} #reverses each string in a character vector
each_v1_by_v2 = function(v1,v2,sep = ""){
v1 = paste0(v1,sep)
as.vector(outer(v1,v2,paste0))
} #Combines each of v1 with first of v2, then each of v1 with second of v2, etc., separated by sep.
each_v2_by_v1 = function(v1,v2,sep = ""){
sapply(v1,function(n){
sapply(v2,function(n2){
paste0(n,sep,n2)
})
}) %>% as.vector
} #Combines first of v1 with each of v2, then second of v1 with each of v2, etc., separated by sep.
#mk muts----
nucleotides = c("a","g","c","t")
positions = c(1,2,3)
later_colnames = c(colnames(codon_table), each_v1_by_v2(nucleotides,positions))
mkmut1 = function(codon,nuc,position){
codon_original = codon
substr(codon,position,position) = nuc
if( codon == codon_original){
NA
} else {
substr(codon,position,position) = nuc
codon
}
} #mk one mutation for one codon at one position. No mutation is annotated as NA.
mkmut2 = function(nucs = nucleotides,codon, position){
sapply(nucs,function(n){
mkmut1(codon,n,position)
})
} #mk all mutations for one codon at one position
mkmut3 = function(nucs = nucleotides,codon,pos = positions){
sapply(pos,function(p){
mkmut2(nucs = nucs,codon = codon, pos = p)
}) %>% as.vector
} #mk all mutations for one codon at all positions
mkmut_all = function(nucs = nucleotides, codons, pos = positions){
sapply(codons,function(c){
mkmut3(nucs,codon = c,pos)
}) %>% t()
}
codon_table = mkmut_all(codons = codon_table$codon %>% as.character) %>% cbind(codon_table,.)
colnames(codon_table) = later_colnames #C 17_01_18: Checked mutations and positions if codon created was correct for one codon. (Had checked this previously when I first made this for a couple other codons as well). Also checked for all codons with a at 1, g at 1 c at 2, whether the corresponding changes at those positions that would not cause a mutation (a1->a) were annotated correctly as <NA>.
#annot new AA, class----
id_index_value = function(id,index,value){
sapply(id,function(x){
if(is.na(x)){
NA
} else{
value[grep(x,index)]
}
})
} #Have any vector for which I want to find the positions of those values in a second vector and then use those positions to extract values from a third vector.
ids_index_value = function(ids,index,value){
apply(ids,2,function(i){
id_index_value(id = i,index,value)
})
} #Same as above, but for multiple ID vectors, where "ids" is a data.frame or matrix and ID vectors are in columns
ids_index_values = function(ids,index,values,prefix = paste0("n",colnames(values)), suffix = colnames(ids), sep = "_"){
l = lapply(values,function(v){
ids_index_value(ids = ids,index,value = v)
}) %>% do.call(cbind,.)
colnames(l) = each_v2_by_v1(prefix,suffix,sep)
l
} #Same as above, but for multiple id vectors and multiple value vectors
codon_table = ids_index_values(codon_table %>% subset(select = -c(code3,codon,AA,code1,charge,polarity,pv)),codon_table$codon %>% as.vector(),codon_table %>% subset(select = c(code1,charge,polarity,pv))) %>% cbind(codon_table,.) #C 17_01_18: logic is correct.  Also systematically checked that all new ATG were annotated as M, that all new unique codons in a1 were only annotated with a unique amino acid code in ncode1_a1, and unique new charge,polarity,pv classes.  Also each new codon in a1 should appear exactly 3 times, as there will be 3 other unique codons from which it can mutate-checked this for a1-3, and all nucleotides actg at position 1.  All confirmed.  Then systematically checked in a batched way:
#
# ##if all new codons and their code1 annotations are correct:
# new.comp = function(check.against = "code1",ncomp = "ncode1_"){
#   x = data.frame(ncodon= codon_table[,each_v1_by_v2(nucleotides,positions)] %>% as.matrix %>% as.vector,
#                  compare = codon_table[,paste0(ncomp,each_v1_by_v2(nucleotides,positions))] %>% as.matrix %>% as.vector,
#                  row.names = NULL)
#   x
#
#   y = cbind(codon_table %>% subset(select = c("codon",check.against)) %>% arrange(codon),subset(x,!duplicated(ncodon) & !is.na(compare)) %>% arrange(ncodon))
#   y
#   #
#   mutate(y,rcodon = codon == ncodon,rcompare = y[,check.against]==compare)
# }#checks the new codons and new "ncomp" column (eg any annotation of that new codon), against the true codon and annotation (obtained in a different way, from the first "original" columns of the codon_table codons 1:64).
#
# new.comp() #yes
#
# ##if all new codons and their different class annotations are correct
# new.comp(check.against = "charge",ncomp = "ncharge_") #yes
# new.comp(check.against = "polarity",ncomp = "npolarity_") #yes
# new.comp(check.against = "pv",ncomp = "npv_") #yes
#
#
#end----
codon_table
codon_table
codon_freqs2
