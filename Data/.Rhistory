# bl_flu.fish.det = fisher_thresh_pl_fnx(fisher.bloom.det,"Bloom_Flu")
#
# flu.bloom.fish.det = fisher_thresh_pl_fnx(fisher.bloom.det %>% subset(!grepl("Bloom",Study) & Study != "HIV_ENV") %>% mutate(Study = mapvalues(Study,c("NP_Aichi","NP_PR8","HA_WSN33"),c("NP_H3N2","NP_H1N1","HA_H1N1"))))+theme_bw()+expand_limits(y=0)+xlab("Relative Preference Threshold")
#
# other.fish.det = fisher_thresh_pl_fnx(dat = fisher.other.det %>% subset(grepl("xSTOP",Study)),study = F, xSTOPS = T)
#
# ##bf----
# env.fish.bf = fisher_thresh_pl_fnx(fisher.bloom.bf,"HIV_ENV")
# np.fish.bf = fisher_thresh_pl_fnx(fisher.bloom.bf,"NP_Aichi")
# np2.fish.bf = fisher_thresh_pl_fnx(fisher.bloom.bf,"NP_PR8")
# ha.fish.bf = fisher_thresh_pl_fnx(fisher.bloom.bf,"HA_WSN33")
# h1n1.fish.bf = fisher_thresh_pl_fnx(fisher.bloom.bf,"Bloom_H1N1")
# bl_flu.fish.bf = fisher_thresh_pl_fnx(fisher.bloom.bf,"Bloom_Flu")
#
# other.fish.bf = fisher_thresh_pl_fnx(dat = fisher.other.bf %>% subset(grepl("xSTOP",Study)),study = F, xSTOPS = T)
#
# #C 17_01_23
#  I checked whether total numbers of TS and TV used for this analysis matches the total number of TS and tv in the .annot
#
# c.n = function(stud, df){
#   list(fish.total = fisher_thresh %>% subset(Study == stud) %>% .$total_n %>% unique, #total ts and tv exclduing both in fisher analysis
#               annot.total = df %>% subset(TS_TV == "FALSE" | TS_TV == "TRUE") %>% count(.(TS_TV)) %>% .$freq %>% sum, #total ts and tv excluding both in annot
#        fish.indv = fisher_thresh %>% subset(Study == stud & threshold == .05, select = c(below_thresh_TV,above_thresh_TV, below_thresh_TS, above_thresh_TS)) %>% c(tv = .[1,1]+.[1,2], ts = .[1,3]+.[1,4]), #total ts and tv individually in analysis
#        annot.indv = df %>% subset(TS_TV == "FALSE" | TS_TV == "TRUE") %>% count(.(TS_TV)) #total ts and tv individually in annot
#        )
# }
#
# c.n("HIV_ENV",env.annot)
# c.n("NP_Aichi",np.annot)
# c.n("NP_PR8",np2.annot)
# c.n("HA_WSN33",ha.annot)
# ##all are correct
# ##I then checked whether total numbers of TS and TV used for this analysis matches the total number of TS and tv in the .annot, according to the below or above 1.
# c.n = function(stud, df, det.bf = "det"){
#   if(det.bf == "det"){
#     df2 = fisher.bloom.det
#     df %<>% subset(Rel_site_pref <= 1)
#   }
#   else if(det.bf == "bf"){
#     df2 = fisher.bloom.bf
#     df %<>% subset(Rel_site_pref >= 1)
#   }
#
#   list(fish.total = df2 %>% subset(Study == stud) %>% .$total_n %>% unique, #total ts and tv exclduing both in fisher analysis
#               annot.total = df %>% subset(TS_TV == "FALSE" | TS_TV == "TRUE") %>% count(.(TS_TV)) %>% .$freq %>% sum, #total ts and tv excluding both in annot
#        fish.indv = df2 %>% subset(Study == stud & threshold == .05, select = c(below_thresh_TV,above_thresh_TV, below_thresh_TS, above_thresh_TS)) %>% c(tv = .[1,1]+.[1,2], ts = .[1,3]+.[1,4]), #total ts and tv individually in analysis
#        annot.indv = df %>% subset(TS_TV == "FALSE" | TS_TV == "TRUE") %>% count(.(TS_TV)) #total ts and tv individually in annot
#        )
# }
#
# c.n("HIV_ENV",env.annot)
# c.n("NP_Aichi",np.annot)
# c.n("NP_PR8",np2.annot)
# c.n("HA_WSN33",ha.annot)
# ##all N are correct.
#end----
# Chunk 16: CDF
#sub for cdf
sub_cdf = function(studies, Set = "all_xSTOP", Stops = "STOP", xGenes = c("NONE"), xDatasets = c("NONE"), only_Genes = c("NONE"),data_frame = all_studies,study_name = studies){ #defualts then is without stops
study_stops = Stops
if(grepl("STOP",Set)){
if(grepl("TEV|Lauring",studies)){
study_stops = "stop"
}
else if(grepl("VSV",studies)){
study_stops = "Stop"
}
}
sub(studies, Set, study_stops, xGenes, xDatasets, only_Genes,data_frame) %>% mutate(Study = study_name)
}
cdf.df = rbind(sub_cdf("Lauring",study_name = "Lauring"),
sub_cdf("Lauring",xDatasets = "HA/NA",study_name = "Lauring_gw"),
sub_cdf("Lauring",only_Genes = c("HA","NA"),study_name = "Lauring_HANA"),
sub_cdf("Lauring",xGenes = c("HA","NA"),study_name = "Lauring_xHAxNA"),
sub_cdf("Lauring",xGenes = c("HA","NA"),study_name = "Internal_Viable",data_frame = all_studies %>% subset(Fitness.Mean > 0)),
sub_cdf("HIV",only_Genes = "Integrase",study_name = "HIV_IN"),
sub_cdf("HIV",only_Genes = "Capsid",study_name = "HIV_CA"),
sub_cdf("phix174_Domingo_Calap_09",study_name = "phix174"),
sub_cdf("qb_Domingo_Calap_09",study_name = "qb"),
sub_cdf("TEV_Carrasco_07_full",study_name = "TEV"),
sub_cdf("f1_Peris_10",study_name = "f1"),
sub_cdf("VSV"),
sub_cdf("Bloom",only_Genes = "HA",study_name = "HA_WSN33"),
sub_cdf("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi"),
sub_cdf("Bloom",only_Genes = "NP",data_frame = all_studies %>% subset(Dataset == "NP2"),study_name = "NP_PR8"),
sub_cdf("Bloom_env",only_Genes = "env",study_name = "HIV_ENV")
)
other.studs = cdf.df$Study %>% unique %>% remove_elements(elements = c("HIV_ENV","NP_PR8","NP_Aichi","HA_WSN33"))
decent.n.studs = other.studs %>% remove_elements(elements = c("qb","phix174"))
bloom.studs = cdf.df$Study %>% unique %>% retain_elements(elements = c("HIV_ENV","NP_PR8","NP_Aichi","HA_WSN33"))
cdf.df$Study = factor(cdf.df$Study,levels = c("Lauring","Lauring_gw","Lauring_xHAxNA","Internal_Viable","Lauring_HANA","HA_WSN33","NP_PR8","NP_Aichi","HIV_IN","HIV_CA","HIV_ENV","TEV","f1","VSV","phix174","qb"))
#del all below
# other.cdf.pl = cdf.pl.fnx(dat = cdf.df %>% subset(Study %in% other.studs))
# decent.n.cdf.pl = cdf.pl.fnx(dat = cdf.df %>% subset(Study %in% decent.n.studs))
#
# la.internal.cdf.pl = cdf.pl.fnx(dat = cdf.df, study = "Lauring_xHAxNA")+ggtitle("Lauring Flu Data: Internal: CDF") #for stats analysis slide of meeting with george 010616
#
# v.internal.cdf.pl = cdf.pl.fnx(dat = cdf.df, study  = "Internal_Viable")+ggtitle("Lauring Flu Data: Internal & Viable: CDF") #for stats analysis slide of meeting with george 010616
#
#
# flu.cdf.pl = cdf.pl.fnx(dat = cdf.df %>% subset(Study %in% (bloom.studs %>% remove_elements(elements = "HIV_ENV"))))
# flu.bf.cdf.pl = cdf.pl.fnx(dat = cdf.df %>% subset(Fitness.Mean>=1 & Study %in% (bloom.studs %>% remove_elements(elements = "HIV_ENV"))) %>% mutate(Study = mapvalues(Study,c("NP_Aichi","NP_PR8","HA_WSN33"),c("NP_H3N2","NP_H1N1","HA_H1N1")) %>% factor(levels = c("NP_H3N2","NP_H1N1","HA_H1N1"))))+xlab("Relative Preference")+theme_bw()
#
# d = cdf.df %>% subset(Fitness.Mean<=1 & Study %in% (bloom.studs %>% remove_elements(elements = "HIV_ENV"))) %>% mutate(Study = mapvalues(Study,c("NP_Aichi","NP_PR8","HA_WSN33"),c("NP_H3N2","NP_H1N1","HA_H1N1")))
# d$Study %<>% factor(levels = c("NP_H3N2","NP_H1N1","HA_H1N1"))
# flu.det.cdf.pl = cdf.pl.fnx(dat = d)+theme_bw()+xlab("Relative Preference") #for presentation george.
#
# # flu.bloom.fish.det = fisher_thresh_pl_fnx(fisher.bloom.det %>% subset(!grepl("Bloom",Study) & Study != "HIV_ENV"))+theme_bw()+expand_limits(y=0)
#
# hiv.cdf.pl = cdf.pl.fnx(dat = cdf.df %>% subset(grepl("HIV",Study) & Study != "HIV_ENV"))
#
# env.cdf.pl = cdf.pl.fnx(cdf.df,"HIV_ENV")
# env.det.cdf.pl = cdf.pl.fnx(cdf.df %>% subset(Fitness.Mean<=1),"HIV_ENV")+theme_bw()
# env.bf.cdf.pl = cdf.pl.fnx(cdf.df %>% subset(Fitness.Mean>=1 & Fitness.Mean<=10),"HIV_ENV")+theme_bw()+xlab("Relative Preference")
#
# #plot hist----
# hist.pl.fnx = function(dat,
#                       study = F){
#   if(study != F){
#     dat %<>% subset(Study == study)
#   }
#
#   pl = ggplot(dat,aes(x = Fitness.Mean, y = ..density..))+
#     geom_histogram(aes(fill=TS_TV,group = TS_TV),alpha = .3,position = "identity")+
#     scale_fill_manual(values = c(TS = "blue", TV = "red"))+
#     geom_vline(aes(xintercept = 1))+
#     # ylab("Proportion <= x")+
#     xlab("Relative Fitness")
#
#   if(study != F){
#     pl+ggtitle(study)
#   } else{
#     pl+facet_wrap(~Study,scales = "free_x")
#   }
# }
#
# other.hist.pl = hist.pl.fnx(dat = cdf.df %>% subset(Study %in% other.studs))
# decent.n.hist.pl = hist.pl.fnx(dat = cdf.df %>% subset(Study %in% decent.n.studs))
#
# flu.hist.pl = hist.pl.fnx(dat = cdf.df %>% subset(Study %in% (bloom.studs %>% remove_elements(elements = "HIV_ENV"))))
# flu.det.hist.pl = hist.pl.fnx(dat = cdf.df %>% subset(Fitness.Mean<=1 & Study %in% (bloom.studs %>% remove_elements(elements = "HIV_ENV"))))
# flu.bf.hist.pl = hist.pl.fnx(dat = cdf.df %>% subset(Fitness.Mean>=1 & Study %in% (bloom.studs %>% remove_elements(elements = "HIV_ENV"))))
#
# env.hist.pl = hist.pl.fnx(cdf.df,"HIV_ENV")
# env.det.hist.pl = hist.pl.fnx(cdf.df %>% subset(Fitness.Mean<=1),"HIV_ENV")
# env.bf.hist.pl = hist.pl.fnx(cdf.df %>% subset(Fitness.Mean>=1 & Fitness.Mean<=10),"HIV_ENV")
# #ks test----
# ks.test(sub("Lauring",xGenes = c("HA","NA")) %>% subset(TS_TV == "TS") %>% .$Fitness.Mean,
#         sub("Lauring",xGenes = c("HA","NA")) %>% subset(TS_TV == "TV")%>% .$Fitness.Mean)
#
# library(kSamples)
# ts = sub("Bloom",only_Genes = "NP",xDatasets = "NP2") %>% subset(TS_TV == "TS") %>% .$Fitness.Mean
# tv = sub("Bloom",only_Genes = "NP",xDatasets = "NP2") %>% subset(TS_TV == "TV") %>% .$Fitness.Mean
# ad.test(ts,tv,method = "asymptotic")
#
# #plot and find method 1
# set.seed(15)
# dd <- data.frame(x=rnorm(30))
# ggplot(dd, aes(x)) +
#     stat_ecdf() +
#     stat_function(fun = pnorm, colour = "red")
#
# ed <- ecdf(dd$x)
# maxdiffidx <- which.max(abs(ed(dd$x)-pnorm(dd$x)))
# maxdiffat <- dd$x[maxdiffidx]
#
# ggplot(dd, aes(x)) +
#     stat_ecdf() +
#     stat_function(fun = pnorm, colour = "red") +
#     geom_vline(x=maxdiffat, lty=2)
#
#
# #plot and find method 2
# sample1<-rnorm(1000)
# sample2<-rnorm(1000, 2, 2)
#
# group <- c(rep("sample1", length(sample1)), rep("sample2", length(sample2)))
# dat <- data.frame(KSD = c(sample1,sample2), group = group)
# cdf1 <- ecdf(sample1)
# cdf2 <- ecdf(sample2)
#
# minMax <- seq(min(sample1, sample2), max(sample1, sample2), length.out=length(sample1))
# x0 <- minMax[which( abs(cdf1(minMax) - cdf2(minMax)) == max(abs(cdf1(minMax) - cdf2(minMax))) )]
# y0 <- cdf1(x0)
# y1 <- cdf2(x0)
#
#
# ggplot(dat, aes(x = KSD, group = group, colour = group, linetype=group))+
#   stat_ecdf(size=1) +
#   xlab("mm") +
#   ylab("Cumulitive Distibution") +
#   geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),
#                linetype = "dashed", color = "red") +
#   geom_point(aes(x = x0[1] , y= y0[1]), color="red", size=1) +
#   geom_point(aes(x = x0[1] , y= y1[1]), color="red", size=1) +
#   ggtitle("K-S Test: Sample 1 / Sample 2")
#
#
#
#
#
#
#
#
# geom_segment(aes(x = x0[1], y = y0[1], xend = x0[1], yend = y1[1]),
#                linetype = "dashed", color = "red") +
#
#
# #!then do KS test and see if can plot that on cdf as well...
#
# #
# # test = data.frame(a = 1:3,b = c("a","b","c"),c = 4:6)
# # melt(test,measure.vars = .(c))
# #
# # #plot ecdf with native plot
# # ecdf(testts) %>% plot(verticals = T,do.points=F,col = "blue",xlim = c(0,1.3))
# # ecdf(testtv) %>% plot(verticals = T,do.points=F,col = "red",xlim = c(0,1.3), add = T)
# #
# # testts = sub("Bloom_env") %>% subset(TS_TV == "TS" & Fitness.Mean >= 1) %>% .$Fitness.Mean
# # testtv = sub("Bloom_env") %>% subset(TS_TV == "TV" & Fitness.Mean >= 1) %>% .$Fitness.Mean
# # ecdf(testts) %>% plot(verticals = T,do.points=F,col = "blue")
# # ecdf(testtv) %>% plot(verticals = T,do.points=F,col = "red", add = T)
# #
# #
# # #example get x and y for empirical cdf
# # testts = sub("Lauring") %>% subset(TS_TV == "TS") %>% .$Fitness.Mean
# # testtv = sub("Lauring") %>% subset(TS_TV == "TV") %>% .$Fitness.Mean
# #
# #
# # df = data.frame(ts = c(testts,rep(NA,length(testtv)-length(testts))),
# #                 tv = testtv)
# # library(Hmisc)
# # a = ddply(melt(df),.(variable),plyr::summarize,x = Ecdf(value,pl=F)$x, y = Ecdf(value,pl=F)$y)
# # detach("package:Hmisc",unload=T)
# #
# #
#end----
# Chunk 17: TSTV.RC
#mk r/c dataframes----
#get the r/c distincitons first.
choose.rc = function(dat,rc = "both",type = "none"){
if(rc == "both"){
dat
} else if(rc == "r"){
if(type == "C_ncharge"){
dat %>% subset(C_ncharge == F)
} else if(type == "C_npolarity"){
dat %>% subset(C_npolarity == F)
} else if(type == "C_npv"){
dat %>% subset(C_npv == F)
}
} else if(rc == "c"){
if(type == "C_ncharge"){
dat %>% subset(C_ncharge == T)
} else if(type == "C_npolarity"){
dat %>% subset(C_npolarity == T)
} else if(type == "C_npv"){
dat %>% subset(C_npv == T)
}
}
}
aasub.rc = function(dat){
dat %>% mutate(AA_Sub = paste0(WT_AA,X.SITE,AA_Mut))
}
sub.rc = function(dat1,id = "AA_Sub",dataset,dat2 = all_studies){
muts.desired = dat1[,id]
dat2 %<>% subset(Dataset == dataset)
dat2[dat2[,id] %in% muts.desired,]
}
choose2sub.rc = function(dat1,rc = "both",type = "none",id = "AA_Sub",dataset,dat2 = all_studies){
choose.rc(dat1,rc,type) %>% aasub.rc %>% sub.rc(id = id,dataset = dataset,dat2 = dat2)
}
sets.rc = c(r = "r",c = "c")
sets.type = c(charge = "C_ncharge",polarity = "C_npolarity",pv = "C_npv")
datasets = c("NP","NP2","HA","env")
dfs = rbind(np.annot %>% mutate(dtset = "NP"),np2.annot %>% mutate(dtset = "NP2"),ha.annot %>% mutate(dtset = "HA"),env.annot %>% mutate(dtset = "env"))
bloom.rc = lapply(sets.rc,function(set){
lapply(sets.type,function(ty){
lapply(datasets,function(dataset){
choose2sub.rc(dat1 = dfs %>% subset(dtset == dataset),rc = set,type = ty,dataset = dataset)
}) %>% do.call(rbind,.)
})
}) #now have 6 dataframes with all 4 bloom datasets/genes in a list list$r$type and list$c$type made from selecting only the mutations of interest from all studies, can put each one of these dataframes into the analysis and get $rc$type analysis output for all 4 datasets/genes.
#addtl fisher and plotting fnx----
study2fisher_thresh = function(studies,
width = .05,min = 0,max = max_fit(studies),slide_by = 1, #windows settings
Stops = "INCLUDE", xGenes = c("NONE"), xDatasets = c("NONE"), only_Genes = c("NONE"),
data_frame = all_studies,
study_name = studies){
if(studies == "Bloom_env"){
max = min(max_fit(studies),10)
} else if(grepl("Bloom",studies)){
max = min(max_fit(studies,xGenes = "env"),10)
}
if(grepl("Bloom",studies)){
min = width
}
win = set_windows(width,min,max,slide_by)
lapply(1:length(win$up_end),function(x){
fisher_mat_thresh(studies,
windows = T,low_th = win$low_end[x],up_th = win$up_end[x], #set windows options
Stops, xGenes, xDatasets, only_Genes,
data_frame) %>%
mat2stat_thresh(m = .,study = ifelse(Stops != "INCLUDE",paste0(study_name,"_xSTOP"),study_name),
low_th = win$low_end[x],up_th = win$up_end[x])
}) %>% do.call(rbind,.)
}
fisher_mat_thresh =function(studies,
windows = F,low_th = F,up_th =F, #set windows options
Stops = "INCLUDE", xGenes = c("NONE"), xDatasets = c("NONE"), only_Genes = c("NONE"),
data_frame = all_studies){
#Set up fisher matrix
m = matrix(data = rep(NA,4),
nrow = 2,
ncol = 2,
byrow = T,
dimnames = list(c("TV","TS"),c("below_threshold","above_threshold"))
)
#Find complete sub
##Set stops options
xAA_Sub = "xxx"
if(Stops != "INCLUDE"){
xAA_Sub = Stops
}
if(only_Genes != c("NONE")){
s = subset(data_frame,grepl(paste(studies,collapse = "|"),Study) & S_NS == "NS" & !is.na(S_NS) & !grepl(paste(xGenes,collapse = "|"),Gene) & !grepl(paste(xDatasets,collapse = "|"),Dataset) & grepl(paste(only_Genes,collapse = "|"),Gene) & !grepl(xAA_Sub,AA_Sub))
} else{
s = subset(data_frame,grepl(paste(studies,collapse = "|"),Study) & S_NS == "NS" & !is.na(S_NS) & !grepl(paste(xGenes,collapse = "|"),Gene) & !grepl(paste(xDatasets,collapse = "|"),Dataset) & !grepl(xAA_Sub,AA_Sub))
}
#find total n ts, tv from complete sub
N_TV = s %>% .$TS_TV %in% "TV" %>% sum
N_TS = s %>% .$TS_TV %in% "TS" %>% sum
# #sub with window
# if(windows){
#   s = subset(s, Fitness.Mean >= low_th & Fitness.Mean <= up_th)
# }
#now fill in fisher matrix
m["TV","below_threshold"] = s %>% subset(Fitness.Mean <= low_th) %>% .$TS_TV %in% "TV" %>% sum
m["TS","below_threshold"] = s %>% subset(Fitness.Mean <= low_th) %>% .$TS_TV %in% "TS" %>% sum
m["TV","above_threshold"] = N_TV - m["TV","below_threshold"]
m["TS","above_threshold"] = N_TS - m["TS","below_threshold"]
m
}#gets fisher matrix for below or EQUAL to threshold and strictly above threshold.
fisher_thresh_pl_fnx = function(dat,
study = F,
xSTOPS = F,
xmin = 0, xmax = ifelse(study!=F,
max(dat %>% subset(Study == study) %>% .$threshold %>% as.vector %>% as.numeric),
max(dat %>% .$threshold %>% as.vector %>% as.numeric))){
if(study != F){
dat %<>% subset(Study == study)
}
if(!xSTOPS){
dat %<>% subset(!grepl("xSTOP",Study))
}
if(study %in% c(bloom.studs,bloom_flu_studs)){
xlabel = "Relative Preference Threshold"
} else{
xlabel = "Relative Fitness Threshold"
}
pl = ggplot(data = dat, aes(x = threshold, y = OR, group = Study))+
geom_point(stat = "identity", size = 4, aes(color = ifelse(p.value %>% as.vector %>% as.numeric <.05,"p<.05","p>=.05")))+
geom_line()+
# geom_text(aes(y =  auc %>% as.numeric+.05,
#               label = paste0(N_TS,",",N_TV),
#               color = ifelse(p.value %>% as.vector %>% as.numeric <.1,"p<.1","p>=.1")
# )
# )+
scale_color_manual(values=c("p<.05" = "red","p>=.05" = "black"),name = "p-value")+
# ylim(0,1)+
xlab(xlabel)+
xlim(xmin,xmax)+
ylab("Odds Ratio")+
geom_hline(aes(yintercept = 1))+
geom_vline(aes(xintercept = 1))+
theme_bw()
if(study != F){
pl+ggtitle(study)
} else{
pl+facet_wrap(~Study)
}
} #when study = F this gives a warning message "In max(dat %>% subset(Study == study) %>% .$threshold %>% as.vector %>%:  no non-missing arguments to max; returning -Inf" for the xmax, but this doesn't matter for what we need.
cdf.pl.fnx = function(dat,
study = F){
if(study != F){
dat %<>% subset(Study == study)
}
if(study %in% c(bloom.studs,bloom_flu_studs)){
xlabel = "Relative Preference"
} else{
xlabel = "Relative Fitness"
}
pl = ggplot(dat,aes(x = Fitness.Mean))+
stat_ecdf(aes(color=TS_TV,group = TS_TV))+
scale_color_manual(values = c(TS = "blue", TV = "red"))+
geom_vline(aes(xintercept = 1))+
ylab("Proportion <= x")+
xlab(xlabel)+
theme_bw()
if(study != F){
pl+ggtitle(study)
} else{
pl+facet_wrap(~Study,scales = "free_x")
}
}
#analysis r/c----
r.fish = lapply(bloom.rc$r,function(type){
#calc
dat = list(
##all
fisher_thresh = rbind(
study2fisher_thresh(studies = "Bloom_env",only_Genes = "env",study_name = "HIV_ENV",data_frame = type), #bloom env
study2fisher_thresh("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi",data_frame = type),  #bloom np aichi
study2fisher_thresh("Bloom",only_Genes = "NP",study_name = "NP_PR8",data_frame = type %>% subset(Dataset == "NP2"),max = min(10,max_fit(studies,xGenes = "env"))),  #bloom np pr8
study2fisher_thresh("Bloom",only_Genes = "HA",study_name = "HA_WSN33",data_frame = type)   #bloom ha wsn33
) %>%
subset(threshold != 0), #copy pasted from above
##det
fisher.bloom.det = rbind(
study2fisher_thresh.sets("Bloom_env",only_Genes = "env",study_name = "HIV_ENV", set = "DET",data_frame = type), #bloom env
study2fisher_thresh.sets("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi", set = "DET",data_frame = type),  #bloom np aichi
study2fisher_thresh.sets("Bloom",only_Genes = "NP",study_name = "NP_PR8",data_frame = type %>% subset(Dataset == "NP2"), set = "DET"),  #bloom np pr8
study2fisher_thresh.sets("Bloom",only_Genes = "HA",study_name = "HA_WSN33", set = "DET",data_frame = type)
),  #bloom ha wsn33
##bf
fisher.bloom.bf = rbind(
study2fisher_thresh.sets("Bloom_env",only_Genes = "env",study_name = "HIV_ENV", set = "BF",data_frame = type), #bloom env
study2fisher_thresh.sets("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi", set = "BF",data_frame = type),  #bloom np aichi
study2fisher_thresh.sets("Bloom",only_Genes = "NP",study_name = "NP_PR8",data_frame = type %>% subset(Dataset == "NP2"), set = "BF"),  #bloom np pr8
study2fisher_thresh.sets("Bloom",only_Genes = "HA",study_name = "HA_WSN33",set = "BF",data_frame = type)
)#bloom ha wsn33
) #data list
#plot
pl = list(all = list(env = fisher_thresh_pl_fnx(dat$fisher_thresh,"HIV_ENV"),
np.h3n2 = fisher_thresh_pl_fnx(dat$fisher_thresh,"NP_Aichi"),
np.h1n1 = fisher_thresh_pl_fnx(dat$fisher_thresh,"NP_PR8"),
ha = fisher_thresh_pl_fnx(dat$fisher_thresh,"HA_WSN33")
),
det = list(flu = fisher_thresh_pl_fnx(dat$fisher.bloom.det %>%
subset(!grepl("Bloom",Study) & Study != "HIV_ENV") %>%
mutate(Study = mapvalues(Study,
c("NP_Aichi","NP_PR8","HA_WSN33"),
c("NP_H3N2","NP_H1N1","HA_H1N1")
)))+
theme_bw()+
expand_limits(y=0)+xlab("Relative Preference Threshold"),
env = fisher_thresh_pl_fnx(dat$fisher.bloom.det,"HIV_ENV")+theme_bw()+expand_limits(y=0)
),
bf = list(flu = fisher_thresh_pl_fnx(dat$fisher.bloom.bf %>%
subset(!grepl("Bloom",Study) & Study != "HIV_ENV") %>%
mutate(Study = mapvalues(Study,c("NP_Aichi","NP_PR8","HA_WSN33"),
c("NP_H3N2","NP_H1N1","HA_H1N1"))))+
theme_bw()+
expand_limits(y=0)+xlab("Relative Preference Threshold"),
env = fisher_thresh_pl_fnx(dat$fisher.bloom.bf,"HIV_ENV")
)
)
list(data = dat,pl = pl)
})
c.fish = lapply(bloom.rc$c,function(type){
#calc
dat = list(
##all
fisher_thresh = rbind(
study2fisher_thresh(studies = "Bloom_env",only_Genes = "env",study_name = "HIV_ENV",data_frame = type), #bloom env
study2fisher_thresh("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi",data_frame = type),  #bloom np aichi
study2fisher_thresh("Bloom",only_Genes = "NP",study_name = "NP_PR8",data_frame = type %>% subset(Dataset == "NP2"),max = min(10,max_fit(studies,xGenes = "env"))),  #bloom np pr8
study2fisher_thresh("Bloom",only_Genes = "HA",study_name = "HA_WSN33",data_frame = type)   #bloom ha wsn33
) %>%
subset(threshold != 0), #copy pasted from above
##det
fisher.bloom.det = rbind(
study2fisher_thresh.sets("Bloom_env",only_Genes = "env",study_name = "HIV_ENV", set = "DET",data_frame = type), #bloom env
study2fisher_thresh.sets("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi", set = "DET",data_frame = type),  #bloom np aichi
study2fisher_thresh.sets("Bloom",only_Genes = "NP",study_name = "NP_PR8",data_frame = type %>% subset(Dataset == "NP2"), set = "DET"),  #bloom np pr8
study2fisher_thresh.sets("Bloom",only_Genes = "HA",study_name = "HA_WSN33", set = "DET",data_frame = type)
),  #bloom ha wsn33
##bf
fisher.bloom.bf = rbind(
study2fisher_thresh.sets("Bloom_env",only_Genes = "env",study_name = "HIV_ENV", set = "BF",data_frame = type), #bloom env
study2fisher_thresh.sets("Bloom",only_Genes = "NP",xDatasets = "NP2",study_name = "NP_Aichi", set = "BF",data_frame = type),  #bloom np aichi
study2fisher_thresh.sets("Bloom",only_Genes = "NP",study_name = "NP_PR8",data_frame = type %>% subset(Dataset == "NP2"), set = "BF"),  #bloom np pr8
study2fisher_thresh.sets("Bloom",only_Genes = "HA",study_name = "HA_WSN33",set = "BF",data_frame = type)
)   #bloom ha wsn33
)#data list
#plot
pl = list(all = list(env = fisher_thresh_pl_fnx(dat$fisher_thresh,"HIV_ENV"),
np.h3n2 = fisher_thresh_pl_fnx(dat$fisher_thresh,"NP_Aichi"),
np.h1n1 = fisher_thresh_pl_fnx(dat$fisher_thresh,"NP_PR8"),
ha = fisher_thresh_pl_fnx(dat$fisher_thresh,"HA_WSN33")
),
det = list(flu = fisher_thresh_pl_fnx(dat$fisher.bloom.det %>%
subset(!grepl("Bloom",Study) & Study != "HIV_ENV") %>%
mutate(Study = mapvalues(Study,
c("NP_Aichi","NP_PR8","HA_WSN33"),
c("NP_H3N2","NP_H1N1","HA_H1N1")
)))+
theme_bw()+
expand_limits(y=0)+xlab("Relative Preference Threshold"),
env = fisher_thresh_pl_fnx(dat$fisher.bloom.det,"HIV_ENV")+theme_bw()+expand_limits(y=0)
),
bf = list(flu = fisher_thresh_pl_fnx(dat$fisher.bloom.bf %>%
subset(!grepl("Bloom",Study) & Study != "HIV_ENV") %>%
mutate(Study = mapvalues(Study,c("NP_Aichi","NP_PR8","HA_WSN33"),
c("NP_H3N2","NP_H1N1","HA_H1N1"))))+
theme_bw()+
expand_limits(y=0)+xlab("Relative Preference Threshold"),
env = fisher_thresh_pl_fnx(dat$fisher.bloom.bf,"HIV_ENV")
)
)
list(data = dat, pl = pl)
})
